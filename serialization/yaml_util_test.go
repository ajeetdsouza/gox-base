package serialization

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

// Client Config e.g. client name etc for logging
type clientConfiguration struct {
	ClientName            string `yaml:"clientName"`
	EnableNewRelicLogging bool   `yaml:"enableNewRelicLogging"`
	NewRelicLoggingPrefix string `yaml:"newRelicLoggingPrefix"`
}

// This is the main emissary configuration
type configuration struct {
	ClientConfiguration clientConfiguration `yaml:"clientConfiguration"`
}

type localConfig struct {
	EmissaryConfiguration *configuration `yaml:"emissaryConfiguration"`
}

// Test to see if we are able to read a json file
func TestEmissaryConfigFromYaml(t *testing.T) {
	var config = localConfig{}
	if err := ReadYaml("../testdata/app.yml", &config); err != nil {
		assert.Fail(t, "failed to read emissary test file")
	} else {
		assert.NotNil(t, config.EmissaryConfiguration)
		assert.NotNil(t, config.EmissaryConfiguration.ClientConfiguration)
		assert.Equal(t, "SomeApp", config.EmissaryConfiguration.ClientConfiguration.ClientName)
		assert.Equal(t, true, config.EmissaryConfiguration.ClientConfiguration.EnableNewRelicLogging)
		assert.Equal(t, "SomeApp-NewRelic", config.EmissaryConfiguration.ClientConfiguration.NewRelicLoggingPrefix)
	}
}

var testYamlString = `
databases:
  configs:
    master:
      type: mysql
      user: user_1
      password: password_1
      url: [localhost]
      port: 1234
      db: test_1
    scylla:
      type: scylla
      user: user_2
      password: password_2
      url: [localhost]
      port: 12345
      db: test_2
`

type testAutoGenerated struct {
	Databases struct {
		Configs struct {
			Master struct {
				Type     string   `yaml:"type"`
				User     string   `yaml:"user"`
				Password string   `yaml:"password"`
				URL      []string `yaml:"url"`
				Port     int      `yaml:"port"`
				Db       string   `yaml:"db"`
			} `yaml:"master"`
			Scylla struct {
				Type     string   `yaml:"type"`
				User     string   `yaml:"user"`
				Password string   `yaml:"password"`
				URL      []string `yaml:"url"`
				Port     int      `yaml:"port"`
				Db       string   `yaml:"db"`
			} `yaml:"scylla"`
		} `yaml:"configs"`
	} `yaml:"databases"`
}

func TestEmissaryConfigFromYamlString(t *testing.T) {
	config := testAutoGenerated{}
	if err := ReadYamlFromString(testYamlString, &config); err != nil {
		assert.Fail(t, "failed to read emissary test file")
	} else {
		assert.NotNil(t, config.Databases)
		assert.NotNil(t, config.Databases.Configs)
		assert.NotNil(t, config.Databases.Configs.Master)
		assert.NotNil(t, config.Databases.Configs.Scylla)
		assert.Equal(t, "mysql", config.Databases.Configs.Master.Type)
		assert.Equal(t, "user_1", config.Databases.Configs.Master.User)
		assert.Equal(t, "password_1", config.Databases.Configs.Master.Password)
		assert.Equal(t, 1234, config.Databases.Configs.Master.Port)
	}
}

func TestToYaml(t *testing.T) {
	config := testAutoGenerated{}
	if err := ReadYamlFromString(testYamlString, &config); err != nil {
		assert.Fail(t, "failed to read emissary test file")
	}

	out, err := ToYaml(config)
	_ = out
	assert.NoError(t, err)

	configNew := testAutoGenerated{}
	if err := ReadYamlFromString(out, &configNew); err != nil {
		assert.Fail(t, "failed to read emissary test file")
	}

	f, _ := ToYaml(config)
	s, _ := ToYaml(configNew)
	assert.Equal(t, f, s)
}
